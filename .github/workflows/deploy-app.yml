name: Deploy Application

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'terraform/**'
      - '**.md'
  workflow_dispatch:

jobs:
  deploy:
    name: 'Deploy Remix Application'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.20.8
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: "ec2-user"
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
          SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
          SHOPIFY_APP_SCOPES: write_products,write_customers,write_orders
          USPS_CONSUMER_KEY: mHfs1vG04FndnBjVepBvC2FbudaOt5wYChkIi0GZJy4IK90W
          USPS_CONSUMER_SECRET: ${{ secrets.USPS_CONSUMER_SECRET }}
        run: |
          # Check if rsync is installed
          if ! command -v rsync &> /dev/null; then
            echo "rsync not found, attempting to install..."
            # Try with sudo first (for local Act execution)
            if ! (sudo apt-get update && sudo apt-get install -y rsync); then
              echo "Error: Failed to install rsync with sudo. Exiting..."
              exit 1
            fi
            # If that fails, try without sudo (for GitHub-hosted runners)
            if ! command -v rsync &> /dev/null; then
              if ! (apt-get update && apt-get install -y rsync); then
                echo "Error: Failed to install rsync without sudo. Exiting..."
                exit 1
              fi
            fi
          fi

          # Create a temporary directory for deployment
          TEMP_DIR=$(mktemp -d)
          DEPLOY_DIR="address-validation-$(date +%Y%m%d%H%M%S)"

          # Create a deployment directory
          mkdir -p $TEMP_DIR/$DEPLOY_DIR

          # Copy necessary files to the deployment directory (exclude unnecessary directories)
          rsync -a --quiet --exclude="node_modules" --exclude=".git" --exclude="terraform" \
            --exclude=".github" --exclude="**/node_modules" --exclude="**/.git" \
            . $TEMP_DIR/$DEPLOY_DIR/

          # Create .env file with secrets directly in the deployment directory
          cat > $TEMP_DIR/$DEPLOY_DIR/.env <<EOL
          DATABASE_PROVIDER=postgresql
          DATABASE_URL=${DATABASE_URL}
          SHOPIFY_API_KEY=${SHOPIFY_API_KEY}
          SHOPIFY_API_SECRET=${SHOPIFY_API_SECRET}
          SHOPIFY_APP_URL=${SHOPIFY_APP_URL}
          SCOPES=${SHOPIFY_APP_SCOPES}
          USPS_CONSUMER_KEY=${USPS_CONSUMER_KEY}
          USPS_CONSUMER_SECRET=${USPS_CONSUMER_SECRET}
          NODE_ENV=production
          EOL

          # Create deployment package from the temp directory
          cd $TEMP_DIR
          tar -czf deploy.tar.gz $DEPLOY_DIR

          # Verify the tar file was created successfully
          if [ ! -f deploy.tar.gz ]; then
            echo "Error: Failed to create deployment package"
            exit 1
          fi

          # Log the size of the tarball for debugging
          ls -lh deploy.tar.gz

          # Copy files to server with improved settings and retry logic
          echo "Transferring deployment package to server..."
          for i in {1..5}; do
            echo "Attempt $i: Copying deployment package to server..."
            # First check if the server is reachable
            echo "Checking server reachability..."
            if nc -z -w 10 $EC2_HOST 22; then
              echo "Server is reachable on port 22, attempting file transfer..."
              if scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -C deploy.tar.gz $EC2_USERNAME@$EC2_HOST:/tmp/; then
                echo "Successfully copied deployment package to server."
                break
              else
                echo "Failed to copy deployment package to server, attempt $i."
              fi
            else
              echo "Server is not reachable on port 22, attempt $i."
            fi
            
            if [ $i -eq 5 ]; then
              echo "Failed all attempts to copy deployment package."
              echo "Please check the EC2 instance status and network configuration."
              exit 1
            fi
            
            echo "Waiting 30 seconds before retrying..."
            sleep 30
          done

          # Clean up temp directory
          cd -
          rm -rf $TEMP_DIR

          # Create the deployment script to run on the server
          cat > deploy.sh << 'ENDSCRIPT'
          #!/bin/bash
          # Create deployment directory
          mkdir -p /home/$USER

          # Extract the deployment package (now contains a nested directory)
          tar -xzf /tmp/deploy.tar.gz -C /home/$USER/

          # Get the extracted directory name (latest address-validation-* directory)
          DEPLOY_DIR=$(ls -td /home/$USER/address-validation-* | head -1)
          echo "Deployment directory: $DEPLOY_DIR"

          # Check if Node.js is installed
          if ! command -v node &> /dev/null; then
            echo "Node.js not found, installing..."
            # Install Node.js using NVM
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            source ~/.nvm/nvm.sh
            nvm install 18.20.8
            nvm use 18.20.8

            # Verify installation
            node --version
            npm --version
          fi

          # Move to the deployment directory
          cd $DEPLOY_DIR

          # Make sure we're using the right Node.js version
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 18.20.8 || nvm install 18.20.8

          # Install dependencies and build
          npm ci
          npm run build

          # Run database migrations
          npm run setup

          # Create or update the symlink to the current deployment
          ln -sfn $DEPLOY_DIR /home/$USER/current

          # Create service unit file content
          SERVICE_CONTENT="[Unit]
          Description=Address Validation Shopify App
          After=network.target

          [Service]
          Type=simple
          User=${USER}
          WorkingDirectory=/home/${USER}/current
          ExecStart=/home/${USER}/.nvm/versions/node/v18.20.8/bin/npm run start
          Restart=always
          Environment=NODE_ENV=production
          Environment=PATH=/home/${USER}/.nvm/versions/node/v18.20.8/bin:/usr/local/bin:/usr/bin:/bin

          [Install]
          WantedBy=multi-user.target"

          # Always recreate the systemd service file to ensure it uses the correct Node version
          if [ -f /etc/systemd/system/address-validation.service ]; then
            echo "Removing existing service file to ensure latest version is used"
            sudo rm /etc/systemd/system/address-validation.service
          fi

          # Write the service file content to a temporary file
          echo "$SERVICE_CONTENT" > /tmp/address-validation.service

          # Move the file to systemd directory
          sudo mv /tmp/address-validation.service /etc/systemd/system/

          # Reload and enable the service
          sudo systemctl daemon-reload
          sudo systemctl enable address-validation

          # Restart the service
          sudo systemctl restart address-validation

          # Clean up
          rm /tmp/deploy.tar.gz

          # Keep only the 3 most recent deployments
          cd /home/$USER
          ls -dt /home/$USER/address-validation-* | tail -n +4 | xargs -r rm -rf
          ENDSCRIPT

          # Copy and run the deployment script with retry logic
          echo "Transferring deployment script to server..."
          for i in {1..5}; do
            echo "Attempt $i: Copying deployment script to server..."
            # First check if the server is reachable
            echo "Checking server reachability..."
            if nc -z -w 10 $EC2_HOST 22; then
              echo "Server is reachable on port 22, attempting file transfer..."
              if scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -C deploy.sh $EC2_USERNAME@$EC2_HOST:/tmp/; then
                echo "Successfully copied deployment script to server."
                break
              else
                echo "Failed to copy deployment script to server, attempt $i."
              fi
            else
              echo "Server is not reachable on port 22, attempt $i."
            fi
            
            if [ $i -eq 5 ]; then
              echo "Failed all attempts to copy deployment script."
              echo "Please check the EC2 instance status and network configuration."
              exit 1
            fi
            
            echo "Waiting 30 seconds before retrying..."
            sleep 30
          done
          
          # Execute deployment script with improved SSH settings
          echo "Running deployment script on server..."
          for i in {1..3}; do
            echo "Attempt $i: Running deployment script..."
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 -o ServerAliveInterval=30 -o ServerAliveCountMax=3 $EC2_USERNAME@$EC2_HOST "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"; then
              echo "Successfully ran deployment script."
              break
            else
              echo "Failed to run deployment script, attempt $i."
              if [ $i -eq 3 ]; then
                echo "Failed all attempts to run deployment script."
                exit 1
              fi
              echo "Waiting 15 seconds before retrying..."
              sleep 15
            fi
          done
          rm deploy.sh

      - name: Deploy Shopify Extension
        env:
          SHOPIFY_CLI_TTY: "0"
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
          SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
        run: |
          echo "Deploying Shopify Extensions..."

          # Check if shopify CLI is installed, install if not (for local Act execution)
          if ! command -v shopify &> /dev/null; then
            echo "Shopify CLI not found, installing..."
            npm install -g @shopify/cli @shopify/app
          fi

          # Deploy extensions with non-interactive mode and with specific flags
          echo "Running deployment command: npm run deploy -- --path=extensions/address-validation --no-release"
          SHOPIFY_CLI_NO_ANALYTICS=1 SHOPIFY_CLI_TTY=0 npm run deploy -- --path=extensions/address-validation --no-release
