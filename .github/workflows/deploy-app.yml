name: Deploy Application

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'terraform/**'
      - '**.md'
  workflow_dispatch:

jobs:
  deploy:
    name: 'Deploy Remix Application'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy to EC2
        env:
          EC2_HOST: "18.208.152.222"
          EC2_USERNAME: "ec2-user"
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
          SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
          SHOPIFY_APP_SCOPES: write_products,write_customers,write_orders
          USPS_CONSUMER_KEY: mHfs1vG04FndnBjVepBvC2FbudaOt5wYChkIi0GZJy4IK90W
          USPS_CONSUMER_SECRET: ${{ secrets.USPS_CONSUMER_SECRET }}
        run: |
          # Create a temporary directory for deployment
          TEMP_DIR=$(mktemp -d)
          DEPLOY_DIR="address-validation-$(date +%Y%m%d%H%M%S)"
          
          # Create a deployment directory
          mkdir -p $TEMP_DIR/$DEPLOY_DIR
          
          # Copy necessary files to the deployment directory (exclude unnecessary directories)
          # Use -a (archive) without verbose output to reduce log noise and avoid overwhelming GitHub Actions
          rsync -a --quiet --exclude="node_modules" --exclude=".git" --exclude="terraform" \
            --exclude=".github" --exclude="**/node_modules" --exclude="**/.git" \
            . $TEMP_DIR/$DEPLOY_DIR/
          
          # Create .env file with secrets directly in the deployment directory
          cat > $TEMP_DIR/$DEPLOY_DIR/.env <<EOL
          DATABASE_PROVIDER=postgresql
          DATABASE_URL=${DATABASE_URL}
          SHOPIFY_API_KEY=${SHOPIFY_API_KEY}
          SHOPIFY_API_SECRET=${SHOPIFY_API_SECRET}
          SHOPIFY_APP_URL=${SHOPIFY_APP_URL}
          SCOPES=${SHOPIFY_APP_SCOPES}
          USPS_CONSUMER_KEY=${USPS_CONSUMER_KEY}
          USPS_CONSUMER_SECRET=${USPS_CONSUMER_SECRET}
          NODE_ENV=production
          EOL
          
          # Create deployment package from the temp directory
          cd $TEMP_DIR
          tar -czf deploy.tar.gz $DEPLOY_DIR
          
          # Verify the tar file was created successfully
          if [ ! -f deploy.tar.gz ]; then
            echo "Error: Failed to create deployment package"
            exit 1
          fi
          
          # Log the size of the tarball for debugging
          ls -lh deploy.tar.gz
          
          # Copy files to server
          scp -o StrictHostKeyChecking=no $TEMP_DIR/deploy.tar.gz $EC2_USERNAME@$EC2_HOST:/tmp/
          
          # Clean up temp directory
          cd -
          rm -rf $TEMP_DIR

          # Deploy on the server
          ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST << 'ENDSSH'
            # Create deployment directory
            mkdir -p /home/$USER

            # Extract the deployment package (now contains a nested directory)
            tar -xzf /tmp/deploy.tar.gz -C /home/$USER/

            # Get the extracted directory name (latest address-validation-* directory)
            DEPLOY_DIR=$(ls -td /home/$USER/address-validation-* | head -1)
            echo "Deployment directory: $DEPLOY_DIR"

            # Check if Node.js is installed
            if ! command -v node &> /dev/null; then
              echo "Node.js not found, installing..."
              # Install Node.js using NVM
              curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
              source ~/.nvm/nvm.sh
              nvm install 18
              nvm use 18
              
              # Verify installation
              node --version
              npm --version
            fi
            
            # Move to the deployment directory
            cd $DEPLOY_DIR
            
            # Make sure we're using the right Node.js version
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 18 || nvm install 18
            
            # Install dependencies and build
            npm ci
            npm run build
            
            # Run database migrations
            npm run setup

            # Create or update the symlink to the current deployment
            ln -sfn $DEPLOY_DIR /home/$USER/current

            # Set up systemd service if it doesn't exist
            if [ ! -f /etc/systemd/system/address-validation.service ]; then
              # Create service file with proper paths to Node.js from NVM
              cat > /tmp/address-validation.service << 'EOLSERVICE'
[Unit]
Description=Address Validation Shopify App
After=network.target

[Service]
Type=simple
User=${USER}
WorkingDirectory=/home/${USER}/current
ExecStart=/home/${USER}/.nvm/versions/node/v18.18.0/bin/npm run start
Restart=always
Environment=NODE_ENV=production
Environment=PATH=/home/${USER}/.nvm/versions/node/v18.18.0/bin:/usr/local/bin:/usr/bin:/bin

[Install]
WantedBy=multi-user.target
EOLSERVICE
              
              # Move the file to systemd directory
              sudo mv /tmp/address-validation.service /etc/systemd/system/

              sudo systemctl daemon-reload
              sudo systemctl enable address-validation
            fi

            # Restart the service
            sudo systemctl restart address-validation

            # Clean up
            rm /tmp/deploy.tar.gz

            # Keep only the 3 most recent deployments
            cd /home/$USER
            ls -dt /home/$USER/address-validation-* | tail -n +4 | xargs -r rm -rf
          ENDSSH

      - name: Deploy Shopify Extension
        env:
          SHOPIFY_CLI_TTY: "0"
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
          SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
          SHOPIFY_FLAG_PATH: "--path=extensions/address-validation"
        run: |
          echo "Deploying Shopify Extensions..."
          
          # Deploy extensions with non-interactive mode and with specific flags
          SHOPIFY_CLI_NO_ANALYTICS=1 SHOPIFY_CLI_TTY=0 npm run deploy -- --no-release
