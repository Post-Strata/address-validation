# https://shopify.dev/docs/apps/launch/deployment/deploy-in-ci-cd-pipeline
name: Deploy Application

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  deploy:
    name: 'Deploy Remix Application'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18.20.8
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy Shopify Extension
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        env:
          COMMIT_URL: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
          SHOPIFY_CLI_PARTNERS_TOKEN: ${{ secrets.SHOPIFY_CLI_PARTNERS_TOKEN }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
          SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
        run: |
          echo "Deploying Shopify Extensions..."

          # Check if shopify CLI is installed, install if not (for local Act execution)
          if ! command -v shopify &> /dev/null; then
            echo "Shopify CLI not found, installing..."
            npm install -g @shopify/cli @shopify/app
          fi

          # Deploy extensions with non-interactive mode and with specific flags
          echo "Running deployment command: npm run deploy -- --path=extensions/address-validation --f --source-control-url "$COMMIT_URL""
          npm run deploy -- --path=extensions/address-validation -f --source-control-url "$COMMIT_URL"


      - name: Deploy to EC2
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USERNAME: "ec2-user"
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SHOPIFY_API_KEY: ${{ secrets.SHOPIFY_API_KEY }}
          SHOPIFY_API_SECRET: ${{ secrets.SHOPIFY_API_SECRET }}
          SHOPIFY_APP_URL: ${{ secrets.SHOPIFY_APP_URL }}
          SHOPIFY_APP_SCOPES: write_products,write_customers,write_orders
          USPS_CONSUMER_KEY: mHfs1vG04FndnBjVepBvC2FbudaOt5wYChkIi0GZJy4IK90W
          USPS_CONSUMER_SECRET: ${{ secrets.USPS_CONSUMER_SECRET }}
        run: |
          # Check if rsync is installed
          if ! command -v rsync &> /dev/null; then
            echo "rsync not found, attempting to install..."
            # Try with sudo first (for local Act execution)
            if ! (sudo apt-get update && sudo apt-get install -y rsync); then
              echo "Error: Failed to install rsync with sudo. Exiting..."
              exit 1
            fi
            # If that fails, try without sudo (for GitHub-hosted runners)
            if ! command -v rsync &> /dev/null; then
              if ! (apt-get update && apt-get install -y rsync); then
                echo "Error: Failed to install rsync without sudo. Exiting..."
                exit 1
              fi
            fi
          fi

          # Create a temporary directory for deployment
          TEMP_DIR=$(mktemp -d)
          DEPLOY_DIR="address-validation-$(date +%Y%m%d%H%M%S)"

          # Create a deployment directory
          mkdir -p $TEMP_DIR/$DEPLOY_DIR

          # Copy necessary files to the deployment directory (exclude unnecessary directories)
          rsync -a --quiet --exclude="node_modules" --exclude=".git" --exclude="terraform" \
            --exclude=".github" --exclude="**/node_modules" --exclude="**/.git" \
            . $TEMP_DIR/$DEPLOY_DIR/

          # Create .env file with secrets directly in the deployment directory
          cat > $TEMP_DIR/$DEPLOY_DIR/.env <<EOL
          DATABASE_URL=${DATABASE_URL}
          SHOPIFY_API_KEY=${SHOPIFY_API_KEY}
          SHOPIFY_API_SECRET=${SHOPIFY_API_SECRET}
          SHOPIFY_APP_URL=${SHOPIFY_APP_URL}
          SCOPES=${SHOPIFY_APP_SCOPES}
          USPS_CONSUMER_KEY=${USPS_CONSUMER_KEY}
          USPS_CONSUMER_SECRET=${USPS_CONSUMER_SECRET}
          NODE_ENV=production
          EOL

          # Create deployment package from the temp directory
          cd $TEMP_DIR
          tar -czf deploy.tar.gz $DEPLOY_DIR

          # Verify the tar file was created successfully
          if [ ! -f deploy.tar.gz ]; then
            echo "Error: Failed to create deployment package"
            exit 1
          fi

          # Log the size of the tarball for debugging
          ls -lh deploy.tar.gz

          # Copy files to server with improved settings and retry logic
          echo "Transferring deployment package to server..."

          # Install netcat if it's not available (for Act compatibility)
          NC_AVAILABLE=true
          if ! command -v nc &> /dev/null; then
            echo "netcat not found, attempting to install..."
            apt-get update && apt-get install -y netcat-openbsd || {
              echo "Warning: Could not install netcat, skipping connectivity check"
              # When netcat isn't available, we'll just attempt the connection anyway
              NC_AVAILABLE=false
            }
          fi

          for i in {1..5}; do
            echo "Attempt $i: Copying deployment package to server..."
            # First check if the server is reachable
            echo "Checking server reachability..."
            if [ "$NC_AVAILABLE" = false ] || nc -z -w 10 $EC2_HOST 22; then
              echo "Server is reachable on port 22, attempting file transfer..."
              if scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 -o ServerAliveInterval=30 -o ServerAliveCountMax=3 -C deploy.tar.gz $EC2_USERNAME@$EC2_HOST:/tmp/; then
                echo "Successfully copied deployment package to server."
                break
              else
                echo "Failed to copy deployment package to server, attempt $i."
              fi
            else
              echo "Server is not reachable on port 22, attempt $i."
            fi

            if [ $i -eq 5 ]; then
              echo "Failed all attempts to copy deployment package."
              echo "Please check the EC2 instance status and network configuration."
              exit 1
            fi

            echo "Waiting 30 seconds before retrying..."
            sleep 30
          done

          # Clean up temp directory
          cd -
          rm -rf $TEMP_DIR

          # Copy deployment scripts to server
          echo "Transferring deployment scripts to server..."
          for i in {1..5}; do
            echo "Attempt $i: Copying deployment scripts to server..."
            if [ "$NC_AVAILABLE" = false ] || nc -z -w 10 $EC2_HOST 22; then
              if scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 -o ServerAliveInterval=30 scripts/deploy.sh $EC2_USERNAME@$EC2_HOST:/tmp/ && \
                 scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 -o ServerAliveInterval=30 scripts/check_deploy.sh $EC2_USERNAME@$EC2_HOST:/tmp/; then
                echo "Successfully copied deployment scripts to server."
                break
              else
                echo "Failed to copy deployment scripts to server, attempt $i."
              fi
            else
              echo "Server is not reachable on port 22, attempt $i."
            fi

            if [ $i -eq 5 ]; then
              echo "Failed all attempts to copy deployment scripts."
              exit 1
            fi

            echo "Waiting 30 seconds before retrying..."
            sleep 30
          done

          # Execute deployment script with improved SSH settings
          echo "Running deployment script on server..."
          for i in {1..3}; do
            echo "Attempt $i: Running deployment script..."

            # Run the deployment script
            if ssh -o StrictHostKeyChecking=no -o ConnectTimeout=60 -o ServerAliveInterval=30 -o ServerAliveCountMax=3 $EC2_USERNAME@$EC2_HOST "chmod +x /tmp/check_deploy.sh && bash -e /tmp/check_deploy.sh"; then
              echo "Successfully ran deployment script."
              break
            else
              echo "Failed to run deployment script, attempt $i."
              # Check database connection specifically if this is the last attempt
              if [ $i -eq 3 ]; then
                echo "Getting database connection details for troubleshooting..."
                ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 $EC2_USERNAME@$EC2_HOST "echo 'Database URL format check:' && echo \${DATABASE_URL} | grep -o 'postgresql://[^:]*:[^@]*@[^/]*/' | sed 's/\(postgresql:\/\/[^:]*\):[^@]*\(@.*\)/\1:REDACTED\2/'"
                echo "Failed all attempts to run deployment script."
                exit 1
              fi
              echo "Waiting 15 seconds before retrying..."
              sleep 15
            fi
          done
